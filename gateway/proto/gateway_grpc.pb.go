// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AlphaServiceClient is the client API for AlphaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlphaServiceClient interface {
	Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Goodbye(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type alphaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlphaServiceClient(cc grpc.ClientConnInterface) AlphaServiceClient {
	return &alphaServiceClient{cc}
}

func (c *alphaServiceClient) Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.AlphaService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaServiceClient) Goodbye(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.AlphaService/Goodbye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlphaServiceServer is the server API for AlphaService service.
// All implementations must embed UnimplementedAlphaServiceServer
// for forward compatibility
type AlphaServiceServer interface {
	Hello(context.Context, *Request) (*Response, error)
	Goodbye(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedAlphaServiceServer()
}

// UnimplementedAlphaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlphaServiceServer struct {
}

func (UnimplementedAlphaServiceServer) Hello(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedAlphaServiceServer) Goodbye(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Goodbye not implemented")
}
func (UnimplementedAlphaServiceServer) mustEmbedUnimplementedAlphaServiceServer() {}

// UnsafeAlphaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlphaServiceServer will
// result in compilation errors.
type UnsafeAlphaServiceServer interface {
	mustEmbedUnimplementedAlphaServiceServer()
}

func RegisterAlphaServiceServer(s *grpc.Server, srv AlphaServiceServer) {
	s.RegisterService(&_AlphaService_serviceDesc, srv)
}

func _AlphaService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AlphaService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaServiceServer).Hello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaService_Goodbye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaServiceServer).Goodbye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AlphaService/Goodbye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaServiceServer).Goodbye(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlphaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AlphaService",
	HandlerType: (*AlphaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _AlphaService_Hello_Handler,
		},
		{
			MethodName: "Goodbye",
			Handler:    _AlphaService_Goodbye_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
